@using BlazorServer.Data.Models.Domain
@using BlazorServer.Data.Contexts
@using BlazorServer.Data.Repositories
@using Microsoft.EntityFrameworkCore
@inject NavigationManager NavigationManager
@inherits OwningComponentBase

<p>
    <a href="/cases/create-case">Create case</a>
</p>

<SfGrid DataSource="@CaseRecords" AllowPaging="true" AllowSorting="true" AllowFiltering="true">
    <GridPageSettings PageSize="5"></GridPageSettings>
    <GridColumns>
        <GridColumn Field=@nameof(CaseRecord.CaseReference) HeaderText="Case Reference"></GridColumn>
        <GridColumn Field=@nameof(CaseRecord.IsActive) HeaderText="Active" TextAlign="TextAlign.Right"></GridColumn>
        <GridColumn Field=@nameof(CaseRecord.DateCreated) HeaderText="Date Created" Format="dd/MM/yyyy" Type="ColumnType.Date" TextAlign="TextAlign.Right"></GridColumn>
        <GridColumn Field=@nameof(CaseRecord.CreatedBy) HeaderText="Created By" TextAlign="TextAlign.Right"></GridColumn>
        <GridColumn HeaderText="Action" TextAlign="TextAlign.Center">
            <Template>
                @{
                    var caseRecord = (context as CaseRecord);
                    <div>
                        <button class="btn btn-primary" @onclick="@(() => ViewCase(caseRecord.Id))">View</button>
                        <button class="btn btn-primary" @onclick="@(() => EditCase(caseRecord.Id))">Edit</button>
                        <button class="btn btn-danger ml-2" @onclick="@(() => DeleteCase(caseRecord))">Delete</button>
                    </div>
                }
            </Template>
        </GridColumn>
    </GridColumns>
</SfGrid>

@code {

    private List<CaseRecord> CaseRecords { get; set; } = new();
    private CaseRepository? _caseRepository;

    [Parameter]
    public bool Busy { get; set; }


    protected override async Task OnInitializedAsync()
    {
        _caseRepository = ScopedServices.GetRequiredService<CaseRepository>();
        if (Busy) return;
        Busy = true;
        var caseRecords = await _caseRepository.GetCases();
        if (caseRecords is not null)
        {
            CaseRecords = caseRecords.ToList();
        }
        Busy = false;
        await base.OnInitializedAsync();
    }

    private void EditCase(int id)
    {
        NavigationManager.NavigateTo($"/cases/edit-case/{id}");
    }

    private void ViewCase(int id)
    {
        NavigationManager.NavigateTo($"/cases/case-detail/{id}");
    }

    private async Task DeleteCase(CaseRecord caseRecord)
    {
        if (Busy) return;
        Busy = true;
        await _caseRepository.DeleteCase(caseRecord.Id);
        var caseRecords = await _caseRepository.GetCases();
        if (caseRecords is not null)
        {
            CaseRecords = caseRecords.ToList();
        }
        StateHasChanged();
        Busy = false;
    }
}