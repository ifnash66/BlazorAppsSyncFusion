@using BlazorServer.Data.Models.Domain
@using BlazorServer.Data.Contexts
@using BlazorServer.Data.Repositories
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@using BlazorServer.Constants
@inject NavigationManager Nav
@inherits OwningComponentBase
@inject AuthenticationStateProvider AuthenticationStateProvider

<p>
    <a href="/hosts/create-host">Create host</a>
</p>

<SfGrid DataSource="@HostRecords" AllowPaging="true" AllowSorting="true" AllowFiltering="true">
    <GridPageSettings PageSize="5"></GridPageSettings>
    <GridColumns>
        <GridColumn Field=@nameof(HostRecord.FirstName) HeaderText="First Name"></GridColumn>
        <GridColumn Field=@nameof(HostRecord.LastName) HeaderText="Last Name" TextAlign="TextAlign.Right"></GridColumn>
        <GridColumn Field=@nameof(HostRecord.DateOfBirth) HeaderText="Date of Birth" Format="dd/MM/yyyy" Type="ColumnType.Date" TextAlign="TextAlign.Right"></GridColumn>
        <GridColumn Field=@nameof(HostRecord.DateCreated) HeaderText="Date Created" Format="dd/MM/yyyy" Type="ColumnType.Date" TextAlign="TextAlign.Right"></GridColumn>
        <GridColumn Field=@nameof(HostRecord.CreatedBy) HeaderText="Created By" TextAlign="TextAlign.Right"></GridColumn>
        <GridColumn HeaderText="Action" TextAlign="TextAlign.Center">
            <Template>
                @{
                    var hostRecord = (context as HostRecord);
                    <div>
                        <button class="btn btn-primary" @onclick="@(() => ViewHost(hostRecord.Id))">View</button>
                        <button class="btn btn-warning ml-2" @onclick="@(() => EditHost(hostRecord.Id))">Edit</button>
                        <button class="btn btn-danger ml-2" @onclick="@(() => DeleteHost(hostRecord))">Delete</button>
                    </div>
                }
            </Template>
        </GridColumn>
    </GridColumns>
</SfGrid>

@code {

    private List<HostRecord> HostRecords { get; set; } = new();
    private HostRepository? _hostRepository;
    private CaseRepository? _caseRepository;

    [Parameter]
    public bool Busy { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _hostRepository = ScopedServices.GetRequiredService<HostRepository>();
        _caseRepository = ScopedServices.GetRequiredService<CaseRepository>();
        if (Busy) return;
        Busy = true;
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userRole = user.FindFirstValue(ClaimTypes.Role);
        await PopulateHosts(userRole, user);
        Busy = false;
        await base.OnInitializedAsync();
    }

    private void ViewHost(int id)
    {
        Nav.NavigateTo($"/hosts/view-host?id={id}");
    }

    private void EditHost(int id)
    {
        Nav.NavigateTo($"/hosts/edit-host?id={id}");
    }

    private async Task DeleteHost(HostRecord hostRecord)
    {
        if (Busy) return;
        Busy = true;
        await _hostRepository.DeleteHost(hostRecord.Id);
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userRole = user.FindFirstValue(ClaimTypes.Role);
        await PopulateHosts(userRole, user);
        StateHasChanged();
        Busy = false;
    }
    
    private async Task PopulateHosts(string userRole, ClaimsPrincipal user)
    {
        if (userRole == ApplicationRoles.Admin)
        {
            var hosts = await _hostRepository.GetHosts();
            if (hosts is not null)
            {
                HostRecords = hosts.ToList();
            }
        }
        else
        {
            var involvedCases = await _caseRepository.GetAssignedCases(user.FindFirstValue(ClaimTypes.NameIdentifier));
            foreach (var caseRecord in involvedCases)
            {
                var hostsForCase = await _caseRepository.GetInvolvedHosts(caseRecord.Id);
                HostRecords.AddRange(hostsForCase);
            }
        }
    }
}