@using BlazorServer.Data.Models.Domain
@using BlazorServer.Data.Repositories
@using Action = Syncfusion.Blazor.Grids.Action
@inject NavigationManager Nav
@inherits OwningComponentBase

<SfGrid DataSource="@CaseNotes" AllowPaging="true" AllowSorting="true" AllowFiltering="true" GridLines="GridLine.Both" Toolbar="@(new List<string>() { "Add", "Edit", "Delete" })">
    <GridPageSettings PageSize="5"></GridPageSettings>
            <GridEditSettings AllowAdding="true" AllowEditOnDblClick="true" AllowEditing="true" AllowDeleting="true"></GridEditSettings>
              <GridEvents OnActionBegin="OnActionBegin" TValue="CaseNote"></GridEvents>
    <GridColumns>
        <GridColumn Field=@nameof(CaseNote.Id) HeaderText="Id"></GridColumn>
        <GridColumn Field="CaseRecord.CaseReference" HeaderText="Case Reference"></GridColumn>
        <GridColumn Field="CaseNoteCategory.Title" HeaderText="Note Category"></GridColumn>
        <GridColumn Field=@nameof(CaseNote.NoteText) HeaderText="Notes" TextAlign="TextAlign.Right"></GridColumn>
        <GridColumn Field=@nameof(CaseNote.DateCreated) HeaderText="Date Created" Format="dd/MM/yyyy" Type="ColumnType.Date" TextAlign="TextAlign.Right"></GridColumn>
        <GridColumn Field=@nameof(CaseNote.CreatedBy) HeaderText="Created By" TextAlign="TextAlign.Right"></GridColumn>
        <GridColumn HeaderText="Action" TextAlign="TextAlign.Center">
            <Template>
                @{
                    var caseNote = (context as CaseNote);
                    <div>
                        <button class="btn btn-primary" @onclick="@(() => ViewCaseNote(caseNote.Id))">View</button>
                    </div>
                }
            </Template>
        </GridColumn>
    </GridColumns>
</SfGrid>

@code {

    private List<CaseNote> CaseNotes { get; set; } = new();
    private CaseNoteRepository? _caseNoteRepository;
    
    [Parameter]
    public int CaseRecordId { get; set; }

    [Parameter]
    public bool Busy { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _caseNoteRepository = ScopedServices.GetRequiredService<CaseNoteRepository>();
        if (Busy) return;
        Busy = true;
        var caseNotes = await _caseNoteRepository.GetCaseNotes();
        if (caseNotes is not null)
        {
            CaseNotes = caseNotes.ToList();
        }
        Busy = false;
        await base.OnInitializedAsync();
    }
    
    private async Task OnActionBegin(ActionEventArgs<CaseNote> args)
    {
        if (args.RequestType == Action.Add)
        {
            Nav.NavigateTo("/guests/create-guest");
        }
        if (args.RequestType == Action.BeginEdit)
        {
            Nav.NavigateTo($"/cases/case-notes/edit?caseRecordId={CaseRecordId}&caseNoteId={args.Data.Id}");
        }
        if (args.RequestType == Action.Delete)
        {
            await DeleteCaseNote(args.Data);
        }
    }

    private void ViewCaseNote(int id)
    {
        Nav.NavigateTo($"/cases/case-notes/view?caseRecordId={id}&caseNoteId={id}");
    }

    private async Task DeleteCaseNote(CaseNote caseNote)
    {
        if (Busy) return;
        Busy = true;
        if (_caseNoteRepository is not null)
        {
            await _caseNoteRepository.DeleteCaseNote(caseNote.Id);
            var caseNotes = await _caseNoteRepository.GetCaseNotes();
            if (caseNotes is not null)
            {
                CaseNotes = caseNotes.ToList();
            }
            StateHasChanged();
        }
        Busy = false;
    }
}