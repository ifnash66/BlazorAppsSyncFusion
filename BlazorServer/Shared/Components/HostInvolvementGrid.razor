@using BlazorServer.Data.Models.Domain
@using BlazorServer.Data.Contexts
@using BlazorServer.Data.Repositories
@using Microsoft.EntityFrameworkCore
@inject NavigationManager Nav
@inherits OwningComponentBase

<SfGrid DataSource="@HostRecords" AllowPaging="true" AllowSorting="true" AllowFiltering="true" GridLines="GridLine.Both">
    <GridPageSettings PageSize="5"></GridPageSettings>
    <GridColumns>
        <GridColumn Field=@nameof(HostRecord.FirstName) HeaderText="First Name"></GridColumn>
        <GridColumn Field=@nameof(HostRecord.LastName) HeaderText="Last Name" TextAlign="TextAlign.Right"></GridColumn>
        <GridColumn Field=@nameof(HostRecord.DateOfBirth) HeaderText="Date of Birth" Format="dd/MM/yyyy" Type="ColumnType.Date" TextAlign="TextAlign.Right"></GridColumn>
        <GridColumn Field=@nameof(HostRecord.DateCreated) HeaderText="Date Created" Format="dd/MM/yyyy" Type="ColumnType.Date" TextAlign="TextAlign.Right"></GridColumn>
        <GridColumn Field=@nameof(HostRecord.CreatedBy) HeaderText="Created By" TextAlign="TextAlign.Right"></GridColumn>
        <GridColumn HeaderText="Action" TextAlign="TextAlign.Center">
            <Template>
                @{
                    var hostRecord = (context as HostRecord);
                    <div>
                        <button class="btn btn-danger ml-2" @onclick="@(() => EndInvolvement(hostRecord))">End Involvement</button>
                    </div>
                }
            </Template>
        </GridColumn>
    </GridColumns>
</SfGrid>

@code {

    private List<HostRecord> HostRecords { get; set; } = new();
    private HostRepository? _hostRepository;

    [Parameter]
    public int CaseRecordId { get; set; }

    [Parameter]
    public bool Busy { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _hostRepository = ScopedServices.GetRequiredService<HostRepository>();
        if (Busy) return;
        Busy = true;
        var hosts = await _hostRepository.GetHostsForCase(CaseRecordId);
        if (hosts is not null)
        {
            HostRecords = hosts.ToList();
        }
        Busy = false;
        await base.OnInitializedAsync();
    }

    private async Task EndInvolvement(HostRecord hostRecord)
    {
        if (Busy) return;
        Busy = true;
        if (_hostRepository is not null)
        {
            await _hostRepository.EndInvolvement(CaseRecordId, hostRecord.Id);
            var hosts = await _hostRepository.GetHostsForCase(CaseRecordId);
            if (hosts is not null)
            {
                HostRecords = hosts.ToList();
            }
            StateHasChanged();
        }
        Busy = false;
    }
}