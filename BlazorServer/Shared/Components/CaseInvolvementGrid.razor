@using BlazorServer.Data.Models.Domain
@using BlazorServer.Data.Contexts
@using Microsoft.EntityFrameworkCore
@inject NavigationManager NavigationManager
@inject IDbContextFactory<AppDbContext> DbContextFactory

<p>
    <a href="@($"/cases/case-involvement/create/{Id}")">Create involvement</a>
</p>

<SfGrid DataSource="@ModelItems" AllowPaging="true" AllowSorting="true" AllowFiltering="true">
    <GridPageSettings PageSize="5"></GridPageSettings>
    <GridColumns>
        <GridColumn Field=@nameof(InvolvementItem.CaseReference) HeaderText="Case Ref"></GridColumn>
        <GridColumn Field=@nameof(InvolvementItem.HostName) HeaderText="Host"></GridColumn>
        <GridColumn Field=@nameof(InvolvementItem.GuestName) HeaderText="Guest"></GridColumn>
        <GridColumn Field=@nameof(InvolvementItem.IsActive) HeaderText="Active" TextAlign="TextAlign.Right"></GridColumn>
        <GridColumn Field=@nameof(InvolvementItem.DateCreated) HeaderText="Date Created" Format="dd/MM/yyyy" Type="ColumnType.Date" TextAlign="TextAlign.Right"></GridColumn>
        <GridColumn HeaderText="Action" TextAlign="TextAlign.Center">
            <Template>
                @{
                    var involvementItem = (context as InvolvementItem);
                    <div>
                        <button class="btn btn-primary" @onclick="@(() => Edit(involvementItem.Id))">Edit</button>
                        <button class="btn btn-danger ml-2" @onclick="@(() => Delete(involvementItem.Id))">Delete</button>
                    </div>
                }
            </Template>
        </GridColumn>
    </GridColumns>
</SfGrid>

@code {
    
    [Parameter]
    public bool Busy { get; set; }

    [Parameter]
    public int Id { get; set; }

    private List<CaseInvolvement> CaseInvolvements { get; set; } = new();
    private List<InvolvementItem> ModelItems { get; set; } = new();

    public class InvolvementItem
    {
        public int Id { get; set; }
        public int CaseRecordId { get; set; }
        public string CaseReference { get; set; }
        public bool IsActive { get; set; }
    
        public DateTime FromDate { get; set; }
        public DateTime? ToDate { get; set; }
        public DateTime DateCreated { get; set; }
        public string HostName { get; set; }
        public string GuestName { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        if (Busy) return;
        Busy = true;
        await using var context = await DbContextFactory.CreateDbContextAsync();
        var caseInvolvements = await context.CaseInvolvements.
            Include(x => x.HostRecord)
            .Include(x => x.GuestRecord)
            .Include(x => x.CaseRecord)
            .Where(x => x.CaseRecordId == Id)
            .ToListAsync();
        
        if (caseInvolvements is not null)
        {
            CaseInvolvements = caseInvolvements;
        }
        
        foreach (var item in CaseInvolvements)
        {
            ModelItems.Add(new InvolvementItem()
            {
                Id = item.Id,
                CaseRecordId = item.CaseRecordId,
                CaseReference = item?.CaseRecord?.CaseReference ?? string.Empty,
                IsActive = item.IsActive,
                FromDate = item.FromDate,
                ToDate = item?.ToDate,
                DateCreated = item.DateCreated,
                HostName = item?.HostRecord?.FullName ?? string.Empty,
                GuestName = item?.GuestRecord?.FullName ?? string.Empty
            });
        }
        
        Busy = false;
        await base.OnInitializedAsync();
    }

    private void Edit(int id)
    {
        NavigationManager.NavigateTo($"/cases/case-involvements/edit/{id}");
    }

    private async Task Delete(int id)
    {
        if (Busy) return;
        Busy = true;
        await using var context = await DbContextFactory.CreateDbContextAsync();
        var involvement = await context.CaseInvolvements.FindAsync(id);
        context.Attach(involvement);
        context.Entry(involvement).State = EntityState.Deleted;
        await context.SaveChangesAsync();
        
        ModelItems.Clear();
        
        var caseInvolvements = await context.CaseInvolvements.
            Include(x => x.HostRecord)
            .Include(x => x.GuestRecord)
            .Include(x => x.CaseRecord)
            .Where(x => x.CaseRecordId == Id)
            .ToListAsync();
        
        if (caseInvolvements is not null)
        {
            CaseInvolvements = caseInvolvements;
        }
        
        foreach (var item in CaseInvolvements)
        {
            ModelItems.Add(new InvolvementItem()
            {
                Id = item.Id,
                CaseRecordId = item.CaseRecordId,
                CaseReference = item?.CaseRecord?.CaseReference ?? string.Empty,
                IsActive = item.IsActive,
                FromDate = item.FromDate,
                ToDate = item?.ToDate,
                DateCreated = item.DateCreated,
                HostName = item?.HostRecord?.FullName ?? string.Empty,
                GuestName = item?.GuestRecord?.FullName ?? string.Empty
            });
        }
        
        StateHasChanged();
        Busy = false;
    }
}