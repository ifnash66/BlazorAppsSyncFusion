@using BlazorServer.Data.Models.Domain
@using Microsoft.EntityFrameworkCore
@using BlazorServer.Data.Contexts
@using BlazorServer.Data.Repositories
@using System.Security.Claims
@using BlazorServer.Constants
@using Action = Syncfusion.Blazor.Grids.Action
@inject NavigationManager Nav
@inherits OwningComponentBase
@inject AuthenticationStateProvider AuthenticationStateProvider

<SfGrid DataSource="@GuestRecords" AllowPaging="true" AllowSorting="true" AllowFiltering="true" GridLines="GridLine.Both" Toolbar="@(new List<string>() { "Add", "Edit", "Delete" })">
    <GridPageSettings PageSize="5"></GridPageSettings>
        <GridEditSettings AllowAdding="true" AllowEditOnDblClick="true" AllowEditing="true" AllowDeleting="true"></GridEditSettings>
          <GridEvents OnActionBegin="OnActionBegin" TValue="GuestRecord"></GridEvents>
    <GridColumns>
        <GridColumn Field=@nameof(GuestRecord.FirstName) HeaderText="First Name"></GridColumn>
        <GridColumn Field=@nameof(GuestRecord.LastName) HeaderText="Last Name" TextAlign="TextAlign.Right"></GridColumn>
        <GridColumn Field=@nameof(GuestRecord.EmailAddress) HeaderText="Email Address" TextAlign="TextAlign.Right"></GridColumn>
        <GridColumn Field=@nameof(GuestRecord.DateCreated) HeaderText="Date Created" Format="dd/MM/yyyy" Type="ColumnType.Date" TextAlign="TextAlign.Right"></GridColumn>
        <GridColumn Field=@nameof(GuestRecord.CreatedBy) HeaderText="Created By" TextAlign="TextAlign.Right"></GridColumn>
        <GridColumn HeaderText="Action" TextAlign="TextAlign.Center">
            <Template>
                @{
                    var guestRecord = (context as GuestRecord);
                    <div>
                        <button class="btn btn-primary" @onclick="@(() => ViewGuest(guestRecord.Id))">View</button>
                    </div>
                }
            </Template>
        </GridColumn>
    </GridColumns>
</SfGrid>

@code {

    private List<GuestRecord> GuestRecords { get; set; } = new();
    private GuestRepository? _guestRepository;
    private CaseRepository? _caseRepository;

    [Parameter]
    public bool Busy { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _guestRepository = ScopedServices.GetRequiredService<GuestRepository>();
        _caseRepository = ScopedServices.GetRequiredService<CaseRepository>();

        if (Busy) return;
        Busy = true;
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userRole = user.FindFirstValue(ClaimTypes.Role);
        await PopulateGuests(userRole, user);
        Busy = false;
        await base.OnInitializedAsync();
    }
    
    private async Task OnActionBegin(ActionEventArgs<GuestRecord> args)
    {
        if (args.RequestType == Action.Add)
        {
            Nav.NavigateTo("/guests/create-guest");
        }
        if (args.RequestType == Action.BeginEdit)
        {
            Nav.NavigateTo($"/guests/edit-guest?id={args.Data.Id}");
        }
        if (args.RequestType == Action.Delete)
        {
            await DeleteGuest(args.Data);
        }
    }

    private void ViewGuest(int id)
    {
        Nav.NavigateTo($"/guests/view-guest?id={id}");
    }

    private async Task DeleteGuest(GuestRecord guest)
    {
        if (Busy) return;
        Busy = true;
        if (_guestRepository is not null)
        {
            await _guestRepository.DeleteGuest(guest.Id);
        }
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userRole = user.FindFirstValue(ClaimTypes.Role);
        await PopulateGuests(userRole, user);
        StateHasChanged();
        Busy = false;
    }

    private async Task PopulateGuests(string userRole, ClaimsPrincipal user)
    {
        if (_guestRepository is not null && _caseRepository is not null)
        {
            if (userRole == ApplicationConstants.Admin)
            {
                var guests = await _guestRepository.GetGuests();
                if (guests is not null)
                {
                    GuestRecords = guests.ToList();
                }
            }
            else
            {
                var involvedCases = await _caseRepository.GetAssignedCases(user.FindFirstValue(ClaimTypes.NameIdentifier));
                foreach (var caseRecord in involvedCases)
                {
                    var guestsForCase = await _caseRepository.GetInvolvedGuests(caseRecord.Id);
                    GuestRecords.AddRange(guestsForCase);
                }
            }
        }
    }
}