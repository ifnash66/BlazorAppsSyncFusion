@using BlazorServer.Data.Models.Domain
@using Microsoft.EntityFrameworkCore
@using BlazorServer.Data.Contexts
@using BlazorServer.Data.Repositories
@inject NavigationManager NavigationManager
@inherits OwningComponentBase

<p>
    <a href="/guests/create-guest">Create guest</a>
</p>

<SfGrid DataSource="@GuestRecords" AllowPaging="true" AllowSorting="true" AllowFiltering="true">
    <GridPageSettings PageSize="5"></GridPageSettings>
    <GridColumns>
        <GridColumn Field=@nameof(GuestRecord.FirstName) HeaderText="First Name"></GridColumn>
        <GridColumn Field=@nameof(GuestRecord.LastName) HeaderText="Last Name" TextAlign="TextAlign.Right"></GridColumn>
        <GridColumn Field=@nameof(GuestRecord.EmailAddress) HeaderText="Email Address" TextAlign="TextAlign.Right"></GridColumn>
        <GridColumn Field=@nameof(GuestRecord.DateCreated) HeaderText="Date Created" Format="dd/MM/yyyy" Type="ColumnType.Date" TextAlign="TextAlign.Right"></GridColumn>
        <GridColumn Field=@nameof(GuestRecord.CreatedBy) HeaderText="Created By" TextAlign="TextAlign.Right"></GridColumn>
        <GridColumn HeaderText="Action" TextAlign="TextAlign.Center">
            <Template>
                @{
                    var guestRecord = (context as GuestRecord);
                    <div>
                        <button class="btn btn-primary" @onclick="@(() => ViewGuest(guestRecord.Id))">View</button>
                        <button class="btn btn-warning ml-2" @onclick="@(() => EditGuest(guestRecord.Id))">Edit</button>
                        <button class="btn btn-danger ml-2" @onclick="@(() => DeleteGuest(guestRecord))">Delete</button>
                    </div>
                }
            </Template>
        </GridColumn>
    </GridColumns>
</SfGrid>

@code {

    private List<GuestRecord> GuestRecords { get; set; } = new();
    private GuestRepository? _guestRepository;

    [Parameter]
    public bool Busy { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _guestRepository = ScopedServices.GetRequiredService<GuestRepository>();
        if (Busy) return;
        Busy = true;
        var guests = await _guestRepository.GetGuests();
        if (guests is not null)
        {
            GuestRecords = guests.ToList();
        }
        Busy = false;
        await base.OnInitializedAsync();
    }
    
    private void ViewGuest(int id)
    {
        NavigationManager.NavigateTo($"/guests/view-guest/{id}");
    }

    private void EditGuest(int id)
    {
        NavigationManager.NavigateTo($"/guests/edit-guest/{id}");
    }

    private async Task DeleteGuest(GuestRecord guest)
    {
        if (Busy) return;
        Busy = true;
        await _guestRepository.DeleteGuest(guest.Id);
        var guests = await _guestRepository.GetGuests();
        if (guests is not null)
        {
            GuestRecords = guests.ToList();
        }
        StateHasChanged();
        Busy = false;
    }
}