@using BlazorServer.Data.Models.Domain
@using Microsoft.EntityFrameworkCore
@using BlazorServer.Data.Contexts
@inject NavigationManager NavigationManager
@inject IDbContextFactory<AppDbContext> DbContextFactory

@if (CaseId is null)
{
    <p>
        <a href="/guests/create-guest">Create guest</a>
    </p>
}

<SfGrid DataSource="@GuestRecords" AllowPaging="true" AllowSorting="true" AllowFiltering="true">
    <GridPageSettings PageSize="5"></GridPageSettings>
    <GridColumns>
        <GridColumn Field=@nameof(GuestRecord.FirstName) HeaderText="First Name"></GridColumn>
        <GridColumn Field=@nameof(GuestRecord.LastName) HeaderText="Last Name" TextAlign="TextAlign.Right"></GridColumn>
        <GridColumn Field=@nameof(GuestRecord.EmailAddress) HeaderText="Email Address" TextAlign="TextAlign.Right"></GridColumn>
        <GridColumn Field=@nameof(GuestRecord.DateCreated) HeaderText="Date Created" Format="dd/MM/yyyy" Type="ColumnType.Date" TextAlign="TextAlign.Right"></GridColumn>
        <GridColumn Field=@nameof(GuestRecord.CreatedBy) HeaderText="Created By" TextAlign="TextAlign.Right"></GridColumn>
        <GridColumn HeaderText="Action" TextAlign="TextAlign.Center">
            <Template>
                @{
                    var guestRecord = (context as GuestRecord);
                    <div>
                        <button class="btn btn-primary" @onclick="@(() => EditGuest(guestRecord.Id))">Edit</button>
                        @if (CaseId is null)
                        {
                            <button class="btn btn-danger ml-2" @onclick="@(() => DeleteGuest(guestRecord))">Delete</button>
                        }
                    </div>
                }
            </Template>
        </GridColumn>
    </GridColumns>
</SfGrid>

@code {

    private List<GuestRecord> GuestRecords { get; set; } = new();

    [Parameter]
    public bool Busy { get; set; }

    [Parameter]
    public int? CaseId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Busy) return;
        Busy = true;
        await using var context = await DbContextFactory.CreateDbContextAsync();
        if (CaseId is null)
        {
            GuestRecords = await context.GuestRecords.ToListAsync();
        }
        else
        {
            var guestIds = await context.CaseInvolvements.Where(x => x.CaseRecordId == CaseId)
                .Select(x => x.GuestRecordId).ToListAsync();
            GuestRecords = await context.GuestRecords.Where(x => guestIds.Contains(x.Id)).ToListAsync();
        }
        Busy = false;
        await base.OnInitializedAsync();
    }

    private void EditGuest(int id)
    {
        NavigationManager.NavigateTo($"/guests/edit-guest/{id}");
    }

    private async Task DeleteGuest(GuestRecord guest)
    {
        if (Busy) return;
        Busy = true;
        await using var context = await DbContextFactory.CreateDbContextAsync();
        context.Attach(guest);
        context.Entry(guest).State = EntityState.Deleted;
        await context.SaveChangesAsync();
        var guests = await context.GuestRecords.ToListAsync();
        if (guests is not null)
        {
            GuestRecords = guests;
            StateHasChanged();
        }
        Busy = false;
    }

}