@page "/cases/case-involvement/create/{id:int}"
@using BlazorServer.Data.Models.Domain
@using BlazorServer.Data.Repositories
@using ChangeEventArgs = Microsoft.AspNetCore.Components.ChangeEventArgs
@inject NavigationManager Nav
@inherits OwningComponentBase
@inject IDbContextFactory<AppDbContext> DbContextFactory

<EditForm Model="@Model" OnValidSubmit="SubmitForm">
    <FluentValidationValidator />
    <ValidationSummary/>
    <div class="mb-3">
        <label>Involvement type</label>
        <select class="form-select form-control" @onchange="InvolvementSelected">
            <option value="">Please select an involvement type...</option>
            @foreach (var item in InvolvementTypes)
            {
                <option value="@item">@item</option>
            }
        </select>
    </div>
    <div class="@($"{HostToggle} mb-3")">
        <label>Hosts</label>
        <InputSelect class="form-select form-control" @bind-Value="Model.HostRecordId">
            <option value="">Please select a host...</option>
            @foreach (var item in HostRecords)
            {
                <option value="@item.Id">@item.FullName</option>
            }
        </InputSelect>
    </div>
    <div class="@($"{GuestToggle} mb-3")">
        <label>Guests</label>
        <InputSelect class="form-select form-control" @bind-Value="Model.GuestRecordId">
            <option value="">Please select a guest...</option>
            @foreach (var item in GuestRecords)
            {
                <option value="@item.Id">@item.FullName</option>
            }
        </InputSelect>
    </div>
        <div class="@($"{UserToggle} mb-3")">
            <label>Users</label>
            <InputSelect class="form-select form-control" @bind-Value="Model.UserId">
                <option value="">Please select a user...</option>
                @foreach (var item in Users)
                {
                    <option value="@item.Id">@item.FullName</option>
                }
            </InputSelect>
        </div>
    <div class="mb-3">
        <input type="submit" class="btn btn-primary" value="Create" />
        <button @onclick="ReloadCaseSummary" class="btn btn-secondary ml-2">Back to case summary</button>
    </div>
</EditForm>

@code {

    [Parameter]
    public bool Busy { get; set; }

    [Parameter]
    public int Id { get; set; }

    private CaseInvolvementRepository? _caseInvolvementRepository;
    private HostRepository? _hostRepository;
    private GuestRepository? _guestRepository;

    private string HostToggle { get; set; } = "d-none";
    private string GuestToggle { get; set; } = "d-none";
    private string UserToggle { get; set; } = "d-none";
    
    private CaseInvolvement Model { get; set; } = new();
    private List<string> InvolvementTypes { get; set; } = new();
    private string InvolvementType { get; set; } = string.Empty;
    public string GuestString { get; set; } = string.Empty;
    private List<HostRecord> HostRecords { get; set; } = new();
    private List<GuestRecord> GuestRecords { get; set; } = new();
    private List<AppUser> Users { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        _caseInvolvementRepository = ScopedServices.GetRequiredService<CaseInvolvementRepository>();
        _hostRepository = ScopedServices.GetRequiredService<HostRepository>();
        _guestRepository = ScopedServices.GetRequiredService<GuestRepository>();
        await using var context = await DbContextFactory.CreateDbContextAsync();
        var users = await context.Users.ToListAsync();
        if (users is not null)
        {
            Users = users;
        }
        
        InvolvementTypes.AddRange(new[] {"Host", "Guest", "CaseWorker"});

        if (Busy) return;
        Busy = true;
        var hosts = await _hostRepository.GetHosts();
        if (hosts is not null)
        {
            HostRecords = hosts.ToList();
        }
        var guests = await _guestRepository.GetGuests();
        if (guests is not null)
        {
            GuestRecords = guests.ToList();
        }
        Model.CaseRecordId = Id;
        Model.DateCreated = DateTime.Now;
        Model.CreatedBy = "System";
        Model.IsActive = true;
        Busy = false;
        await base.OnInitializedAsync();
    }

    private void InvolvementSelected(ChangeEventArgs args)
    {
        InvolvementType = args.Value.ToString();
        
        switch (InvolvementType)
        {
            case "Host":
                HostToggle = "d-block";
                GuestToggle = "d-none";
                UserToggle = "d-none";
                break;
            case "Guest":
                HostToggle = "d-none";
                GuestToggle = "d-block";
                UserToggle = "d-none";
                break;
            case "CaseWorker":
                HostToggle = "d-none";
                GuestToggle = "d-none";
                UserToggle = "d-block";
                break;
        }
    }

    private void ReloadCaseSummary()
    {
        Nav.NavigateTo($"/cases/case-detail/{Id}", forceLoad:true);
    }

    private async Task SubmitForm()
    {
        if (Busy) return;
        Busy = true;
        await _caseInvolvementRepository.AddCaseInvolvement(Model);
        Busy = false;
        Model = new CaseInvolvement();
        Nav.NavigateTo($"/cases/case-detail/{Id}", forceLoad:true);  
    }
}