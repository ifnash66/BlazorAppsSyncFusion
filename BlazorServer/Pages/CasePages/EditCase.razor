@page "/cases/edit-case/{id:int}"
@inject NavigationManager Nav
@using BlazorServer.Data.Models.Domain
@using BlazorServer.Data.Repositories
@inherits OwningComponentBase

<AuthorizeView Policy="HasCaseInvolvement" Resource="CaseModel">
    <Authorized Context="auth">
        <h3>Edit Case</h3>
        <div class="row">
            <div class="col-lg-6">
                <EditForm Model="@CaseModel" OnValidSubmit="SubmitForm">
                    <FluentValidationValidator/>
                    <ValidationSummary/>
                    <div class="mb-3">
                        <label for="@CaseModel.CaseReference">Case reference</label>
                        <InputText @bind-Value="CaseModel.CaseReference" class="form-control"/>
                        <ValidationMessage For="@(() => CaseModel.CaseReference)"/>
                    </div>
                    <div class="mb-3">
                        <SfCheckBox @bind-Checked="CaseModel.IsActive" Label="Active case" CssClass="e-success"></SfCheckBox><br/>
                        <ValidationMessage For="@(() => CaseModel.IsActive)"/>
                    </div>
                    <div class="mb-3">
                        <input type="submit" value="Save" class="btn btn-primary"/>
                        <a href="/cases/index" class="btn btn-secondary ml-2">Back to case list</a>
                    </div>
                </EditForm>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        You do not have permission to view this page!
    </NotAuthorized>
</AuthorizeView>

@code {

    [Parameter]
    public int Id { get; set; }

    private CaseRecord CaseModel { get; set; } = new();
    private bool Busy { get; set; }
    private CaseRepository? _caseRepository;

    protected override async Task OnInitializedAsync()
    {
        _caseRepository = ScopedServices.GetRequiredService<CaseRepository>();
        if (Busy) return;
        Busy = true;
        var caseRecord = await _caseRepository.GetCase(Id);
        if (caseRecord is not null)
        {
            CaseModel = caseRecord;
        }
        Busy = false;
        await base.OnInitializedAsync();
    }

    private async Task SubmitForm()
    {
        if (Busy) return;
        Busy = true;
        await _caseRepository.UpdateCase(CaseModel);
        Busy = false;
        Nav.NavigateTo("/cases/index");
    }

}