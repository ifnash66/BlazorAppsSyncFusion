@page "/home-visits/edit-visit/{id:int}"
@inject NavigationManager Nav
@using BlazorServer.Data.Models.Domain
@using BlazorServer.Data.Repositories
@inherits OwningComponentBase
<h3>Edit Home Visit</h3>

<div class="row">
    <div class="col-lg-6">
        <EditForm Model="@HomeVisitModel" OnValidSubmit="SubmitForm">
            <DataAnnotationsValidator/>
            <ValidationSummary/>
            <div class="mb-3">
                <label>Guests Visited</label>
                <InputSelect @bind-Value="@_selectedGuestIds" class="form-control">
                    @foreach (var guest in GuestRecords)
                    {
                        <option value="@guest.Id">@guest.FullName</option>
                    }
                </InputSelect>
            </div>
            <div class="mb-3 row">
                <div class="col-lg-4">
                    <label for="@HomeVisitModel.VisitDate">Visit Date and Time</label>
                    <SfDateTimePicker TValue="DateTime?"
                                      Format="dd/MM/yyyy HH:mm"
                                      StrictMode=true
                                      Placeholder='Please enter a date and time'
                                      @bind-Value="HomeVisitModel.VisitDate">
                    </SfDateTimePicker>
                    <ValidationMessage For="@(() => HomeVisitModel.VisitDate)"/>
                </div>
            </div>
            <div class="mb-3">
                <p>Currently selected Hosts: @HomeVisitModel.HostsVisited</p>
                <label>Reselect Hosts Visited</label>
                <InputSelect @bind-Value="@_selectedHostIds" class="form-control">
                    @foreach (var host in HostRecords)
                    {
                        <option value="@host.Id">@host.FullName</option>
                    }
                </InputSelect>
            </div>
            <div class="mb-3">
                <p>Currently selected Guests: @HomeVisitModel.GuestsVisited</p>
                <label>Reselect Guests Visited</label>
                <InputSelect @bind-Value="@_selectedGuestIds" class="form-control">
                    @foreach (var guest in GuestRecords)
                    {
                        <option value="@guest.Id">@guest.FullName</option>
                    }
                </InputSelect>
            </div>
            <div class="mb-3">
                <label for="@HomeVisitModel.VisitorName">Visitor Name</label>
                <InputText @bind-Value="HomeVisitModel.VisitorName" class="form-control"/>
                <ValidationMessage For="@(() => HomeVisitModel.VisitorName)"/>
            </div>
            <div class="mb-3">
                <SfCheckBox @bind-Checked="HomeVisitModel.IsTranslatorNeeded" Label="Is translator needed" CssClass="e-success"></SfCheckBox><br/>
                <ValidationMessage For="@(() => HomeVisitModel.IsTranslatorNeeded)"/>
            </div>
            <div class="mb-3">
                <label for="@HomeVisitModel.TranslationLanguage">Translation Language</label>
                <InputText @bind-Value="HomeVisitModel.TranslationLanguage" class="form-control"/>
                <ValidationMessage For="@(() => HomeVisitModel.TranslationLanguage)"/>
            </div>
            <div class="mb-3">
                <label for="@HomeVisitModel.TranslatorName">Translator Name</label>
                <InputText @bind-Value="HomeVisitModel.TranslatorName" class="form-control"/>
                <ValidationMessage For="@(() => HomeVisitModel.TranslatorName)"/>
            </div>
            <div class="mb-3">
                <label for="@HomeVisitModel.VisitNotes">Notes</label>
                <InputTextArea @bind-Value="HomeVisitModel.VisitNotes" rows="5" class="form-control"></InputTextArea>
                <ValidationMessage For="@(() => HomeVisitModel.VisitNotes)"/>
            </div>
            <div class="mb-3">
                <input type="submit" value="Save" class="btn btn-primary"/>
                <a href="/home-visits/index" class="btn btn-secondary ml-2">Back to visits list</a>
            </div>
        </EditForm>
    </div>
</div>

@code {


    [Parameter]
    public int Id { get; set; }

    private HomeVisitRecord HomeVisitModel { get; set; } = new();
    private bool Busy { get; set; }
    private VisitRepository? _visitRepository;
    private HostRepository? _hostRepository;
    private GuestRepository? _guestRepository;

    private IEnumerable<HostRecord> HostRecords { get; set; } = null!;
    private IEnumerable<GuestRecord> GuestRecords { get; set; } = null!;
    private IEnumerable<VisitStatus> VisitStatusList { get; set; } = null!;

    private string[] _selectedHostIds = Array.Empty<string>();
    private string[] _selectedGuestIds = Array.Empty<string>();

    protected override async Task OnInitializedAsync()
    {
        _visitRepository = ScopedServices.GetRequiredService<VisitRepository>();
        _hostRepository = ScopedServices.GetRequiredService<HostRepository>();
        _guestRepository = ScopedServices.GetRequiredService<GuestRepository>();

        if (Busy) return;
        Busy = true;
        var hosts = await _hostRepository.GetHosts();
        HostRecords = hosts;
        var visit = await _visitRepository.GetHomeVisit(Id);
        if (visit is not null)
        {
            HomeVisitModel = visit;
        }

        var guests = await _guestRepository.GetGuests();
        GuestRecords = guests;
        var visitStatusList = await _visitRepository.GetVisitStatusList();
        VisitStatusList = visitStatusList;
        Busy = false;
        await base.OnInitializedAsync();
    }

    private async Task SubmitForm()
    {
        var selectedHostNames = string.Empty;
        foreach (var id in _selectedHostIds)
        {
            var hostRecord = HostRecords.FirstOrDefault(x => x.Id == int.Parse(id));
            selectedHostNames += hostRecord.FullName + ", ";
        }
        selectedHostNames.TrimEnd(',').Trim();
        var selectedGuestNames = string.Empty;
        foreach (var id in _selectedGuestIds)
        {
            var guestRecord = GuestRecords.FirstOrDefault(x => x.Id == int.Parse(id));
            selectedGuestNames += guestRecord.FullName + ", ";
        }
        selectedHostNames.Trim().TrimEnd(',');
        selectedGuestNames.Trim().TrimEnd(',');
        HomeVisitModel.HostsVisited = selectedHostNames;
        HomeVisitModel.GuestsVisited = selectedGuestNames;
        if (Busy) return;
        Busy = true;
        await _visitRepository.UpdateHomeVisit(HomeVisitModel);
        Busy = false;
        Nav.NavigateTo("/home-visits/index");
    }
}