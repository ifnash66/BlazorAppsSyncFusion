@page "/guests/guest-children/create/{guestId:int}"
@using Microsoft.AspNetCore.Components
@using BlazorServer.Data.Models.Domain
@using BlazorServer.Data.Repositories
@inherits OwningComponentBase
@inject NavigationManager Nav
<h3>Guest Child Page</h3>

<div class="row">
    <div class="col-lg-6">
        <EditForm Model="@GuestChildModel" OnValidSubmit="SubmitForm">
            <FluentValidationValidator />
            <ValidationSummary/>
            <div class="mb-3">
                <label for="@GuestChildModel.FirstName">First name</label>
                <InputText @bind-Value="GuestChildModel.FirstName" class="form-control"/>
                <ValidationMessage For="@(() => GuestChildModel.FirstName)"/>
            </div>
            <div class="mb-3">
                <label for="@GuestChildModel.LastName">Last name</label>
                <InputText @bind-Value="GuestChildModel.LastName" class="form-control"/>
                <ValidationMessage For="@(() => GuestChildModel.LastName)"/>
            </div>
            <div class="mb-3 row">
                <div class="col-lg-3">
                    <label for="@GuestChildModel.DateOfBirth">Date of birth</label>
                    <SfDatePicker TValue="DateTime?" StrictMode=true Placeholder='Please enter a date' @bind-Value="@GuestChildModel.DateOfBirth" Format="dd/MM/yyyy"></SfDatePicker>
                    <ValidationMessage For="@(() => GuestChildModel.DateOfBirth)"/>
                </div>
            </div>
            <div class="mb-3">
                <label for="@GuestChildModel.GenderId">Gender</label>
                <InputSelect @bind-Value="GuestChildModel.GenderId" class="form-control form-select">
                    <option value="">Please select a gender...</option>
                    @foreach (var gender in GenderList)
                    {
                        <option value="@gender.Id">@gender.Title</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => GuestChildModel.GenderId)"/>
            </div>
            <div class="mb-3">
                <SfCheckBox @bind-Checked="GuestChildModel.EsolEnrolmentAtIwCollege" Label="ESOL enrolment at college" CssClass="e-success"></SfCheckBox><br/>
                <ValidationMessage For="@(() => GuestChildModel.EsolEnrolmentAtIwCollege)"/>
            </div>
            <p class="h2">Schools</p>
            <div class="mb-3">
                <SfCheckBox @bind-Checked="GuestChildModel.SchoolPlace" Label="School place" CssClass="e-success"></SfCheckBox><br/>
                <ValidationMessage For="@(() => GuestChildModel.SchoolPlace)"/>
            </div>
            <div class="mb-3">
                <label for="@GuestChildModel.NameOfSchool">Name of school</label>
                <InputText @bind-Value="GuestChildModel.NameOfSchool" class="form-control"/>
                <ValidationMessage For="@(() => GuestChildModel.NameOfSchool)"/>
            </div>
            <div class="mb-3">
                <label for="@GuestChildModel.SchoolYearStartedSchool">School year started/school</label>
                <InputNumber @bind-Value="GuestChildModel.SchoolYearStartedSchool" class="form-control"/>
                <ValidationMessage For="@(() => GuestChildModel.SchoolYearStartedSchool)"/>
            </div>
            <div class="mb-3">
                <label for="@GuestChildModel.HomeToSchoolTransport">Home to school transport</label>
                <InputText @bind-Value="GuestChildModel.HomeToSchoolTransport" class="form-control"/>
                <ValidationMessage For="@(() => GuestChildModel.HomeToSchoolTransport)"/>
            </div>
            <div class="mb-3">
                <input type="submit" value="Create" class="btn btn-primary"/>
                <a href="/guests/index" class="btn btn-secondary ml-2">Back to guest list</a>
            </div>
        </EditForm>
    </div>
</div>

@code {

    [Parameter]
    public int GuestId { get; set; }

    private bool _busy = false;
    private GuestChild GuestChildModel = new();
    private List<Gender> GenderList { get; set; } = new();
    private GuestRepository? _guestRepository;

    protected override async Task OnInitializedAsync()
    {
        _guestRepository = ScopedServices.GetRequiredService<GuestRepository>();
        if (_busy) return;
        _busy = true;
        var genderList = await _guestRepository.GetGenderList();
        if (genderList is not null)
        {
            GenderList = genderList.ToList();
        }
        _busy = false;
        await base.OnInitializedAsync();
    }

    private async Task SubmitForm()
    {
        if (_busy) return;
        _busy = true;
        await _guestRepository.AddGuestChild(GuestId, GuestChildModel);
        _busy = false;
        Nav.NavigateTo("/guests/index");
    }
}