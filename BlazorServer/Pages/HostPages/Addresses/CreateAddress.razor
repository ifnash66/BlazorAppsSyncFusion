@page "/hosts/addresses/create-address"
@inject NavigationManager Nav
@inherits OwningComponentBase

<h1>Add New Address</h1>
<hr/>

<div class="row">
    <div class="col-lg-6">
        <EditForm Model="@AddressModel" OnValidSubmit="SubmitForm">
            <FluentValidationValidator/>
            <ValidationSummary/>
            <div class="mb-3">
                <label for="@AddressModel.BuildingNameNumber">Building name/number</label>
                <InputText @bind-Value="AddressModel.BuildingNameNumber" class="form-control"/>
                <ValidationMessage For="@(() => AddressModel.BuildingNameNumber)"/>
            </div>
            <div class="mb-3">
                <label for="@AddressModel.Street">Street</label>
                <InputText @bind-Value="AddressModel.Street" class="form-control"/>
                <ValidationMessage For="@(() => AddressModel.Street)"/>
            </div>
            <div class="mb-3">
                <label for="@AddressModel.Town">Town</label>
                <InputText @bind-Value="AddressModel.Town" class="form-control"/>
                <ValidationMessage For="@(() => AddressModel.Town)"/>
            </div>
            <div class="mb-3">
                <label for="@AddressModel.County">County</label>
                <InputText @bind-Value="AddressModel.County" class="form-control"/>
                <ValidationMessage For="@(() => AddressModel.County)"/>
            </div>
            <div class="mb-3">
                <label for="@AddressModel.Postcode">Postcode</label>
                <InputText @bind-Value="AddressModel.Postcode" class="form-control"/>
                <ValidationMessage For="@(() => AddressModel.Postcode)"/>
            </div>
            <div class="mb-3">
                <input type="submit" value="Save" class="btn btn-primary"/>
                <a href="@($"/hosts/view-host?id={AddressModel.HostRecordId}")" class="btn btn-secondary">Back to host</a>
            </div>
        </EditForm>
    </div>
</div>

@code {

    private AddressRecord AddressModel { get; set; } = new();
    private AddressRecord CurrentAddress { get; set; } = new();
    private HostRepository? _hostRepository;
    private bool _busy = false;
    private int _hostId;

    protected override async Task OnInitializedAsync()
    {
        _hostRepository = ScopedServices.GetRequiredService<HostRepository>();
        GetQueryStringValues();
        if (_busy) return;
        _busy = true;
        var addressRecord = await _hostRepository.GetCurrentAddress(_hostId);
        if (addressRecord is not null)
        {
            CurrentAddress = addressRecord;
            AddressModel.DateCreated = DateTime.Now;
            AddressModel.CreatedBy = "System";
            AddressModel.MoveInDate = DateTime.Now;
            AddressModel.IsCurrentAddress = true;
            AddressModel.HostRecordId = _hostId;
        }
        _busy = false;
        await base.OnInitializedAsync();
    }

    private async Task SubmitForm()
    {
        if (_busy) return;
        _busy = true;
        if (_hostRepository is not null)
        {
            // Set current address in db to not current.
            CurrentAddress.MoveOutDate = DateTime.Now;
            CurrentAddress.IsCurrentAddress = false;
            await _hostRepository.UpdateAddress(CurrentAddress);

            // Update host address fields with new address.
            var hostRecord = await _hostRepository.GetHost(AddressModel.HostRecordId);
            if (hostRecord is not null)
            {
                hostRecord.BuildingNameNumber = AddressModel.BuildingNameNumber;
                hostRecord.Street = AddressModel.Street;
                hostRecord.Town = AddressModel.Town;
                hostRecord.County = AddressModel.County;
                hostRecord.Postcode = AddressModel.Postcode;
                await _hostRepository.UpdateHost(hostRecord);
            }

            // Add the changed address.
            await _hostRepository.AddAddress(AddressModel);
        }
        _busy = false;
        Nav.NavigateTo($"/hosts/view-host?id={AddressModel.HostRecordId}");
    }

    void GetQueryStringValues()
    {
        Nav.TryGetQueryString("id", out _hostId);
    }
}