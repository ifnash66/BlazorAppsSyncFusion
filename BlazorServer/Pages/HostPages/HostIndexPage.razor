@page "/hosts/index"
@using BlazorApps.Shared.Models
@using BlazorServer.Services
@inject NavigationManager NavigationManager
@inherits OwningComponentBase
<h3>Hosts</h3>

<p>
    <a href="/hosts/create-host">Create host</a>
</p>

<div class="row">
    <div class="col-lg-8">

        <SfGrid DataSource="@HostRecords" AllowPaging="true" AllowSorting="true" AllowFiltering="true">
            <GridPageSettings PageSize="5"></GridPageSettings>
            <GridColumns>
                <GridColumn Field=@nameof(HostRecord.Id) HeaderText="Host Id" TextAlign="TextAlign.Right"></GridColumn>
                <GridColumn Field=@nameof(HostRecord.FirstName) HeaderText="First Name"></GridColumn>
                <GridColumn Field=@nameof(HostRecord.LastName) HeaderText="Last Name" TextAlign="TextAlign.Right"></GridColumn>
                <GridColumn Field=@nameof(HostRecord.HostAge) HeaderText="Age" TextAlign="TextAlign.Right"></GridColumn>
                <GridColumn Field=@nameof(HostRecord.DateCreated) HeaderText="Date Created" Format="dd/MM/yyyy" Type="ColumnType.Date" TextAlign="TextAlign.Right"></GridColumn>
                <GridColumn Field=@nameof(HostRecord.CreatedBy) HeaderText="Created By" TextAlign="TextAlign.Right"></GridColumn>
                <GridColumn HeaderText="Action" TextAlign="TextAlign.Center">
                    <Template>
                        @{
                            var hostRecord = (context as HostRecord);
                            <div>
                                <button class="btn btn-primary" @onclick="@(() => EditHost(hostRecord.Id))">Edit</button>
                                <button class="btn btn-danger ml-2" @onclick="@(() => DeleteHost(hostRecord.Id))">Delete</button>
                            </div>
                        }
                    </Template>
                </GridColumn>
            </GridColumns>
        </SfGrid>

    </div>
</div>

@code {

    private List<HostRecord> HostRecords { get; set; } = new();
    private HostClientService? _hostClientService;

    protected override async Task OnInitializedAsync()
    {
        _hostClientService = ScopedServices.GetRequiredService<HostClientService>();

        var hosts = await _hostClientService.GetAll();
        if (hosts is not null)
        {
            HostRecords = hosts.ToList();
        }

        await base.OnInitializedAsync();
    }

    public void RecordClickHandler(RecordClickEventArgs<HostRecord> args)
    {
    // Here, you can customize your code.
        var hostId = args.RowData.Id;
        NavigationManager.NavigateTo($@"/hosts/edit-host/{hostId}");
    }

    public void EditHost(int id)
    {
        NavigationManager.NavigateTo($@"/hosts/edit-host/{id}");
    }

    public async Task DeleteHost(int id)
    {
        await _hostClientService.DeleteHost(id);
        var hosts = await _hostClientService.GetAll();
        if (hosts is not null)
        {
            HostRecords = hosts.ToList();
            StateHasChanged();
        }
    }
}